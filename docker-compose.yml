version: '3.8'

services:
  # -----------------
  # PostgreSQL
  # -----------------
  db:
    image: postgres:14
    container_name: postgres_container
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: finance_db
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # -----------------
  # NLP/ML App
  # -----------------
  app:
    build: .
    container_name: nlp_app
    restart: always
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: finance_db
      DB_USER: postgres
      DB_PASSWORD: admin
      KAFKA_BROKER: kafka:9092
      DATA_FILE: /app/data/finance_data.csv
      PYTHONUNBUFFERED: 1
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    working_dir: /app/src/database
    command: ["python", "postgres_loader.py"]

  # -----------------
  # Zookeeper
  # -----------------
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    healthcheck:
      test: ["CMD-SHELL", "zkServer.sh status || exit 1"]
      interval: 10s
      retries: 10
      timeout: 5s

  # -----------------
  # Kafka Broker
  # -----------------
  kafka:
    image: bitnami/kafka:3.5
    container_name: kafka
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server=kafka:9092 || exit 1"]
      interval: 15s
      retries: 10
      timeout: 10s

  # -----------------
  # Kafka Producer
  # -----------------
  kafka-producer:
    build: .
    image: ghcr.io/momkhan1/kafka-producer:latest
    container_name: kafka_producer
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:9092
      KAFKA_TOPIC: nlp_topic
      DATA_FILE: /app/data/finance_data.csv
      PYTHONUNBUFFERED: 1
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    working_dir: /app/src/streaming
    command: ["python", "kafka_producer.py"]

  # -----------------
  # Kafka Consumer
  # -----------------
  kafka-consumer:
    build: .
    image: ghcr.io/momkhan1/kafka-consumer:latest
    container_name: kafka_consumer
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: finance_db
      DB_USER: postgres
      DB_PASSWORD: admin
      KAFKA_BROKER: kafka:9092
      KAFKA_TOPIC: nlp_topic
      KAFKA_GROUP: nlp_group
      PYTHONUNBUFFERED: 1
    volumes:
      - ./src:/app/src
    working_dir: /app/src/streaming
    command: ["python", "kafka_consumer.py"]

  # -----------------
  # Airflow
  # -----------------
  airflow-init:
    image: apache/airflow:2.7.2
    container_name: airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init &&
        airflow users create \
          --username admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com \
          --password admin
    environment:
      AIRFLOW_HOME: /opt/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: sqlite:////opt/airflow/airflow.db
    volumes:
      - ./airflow/dags:/opt/airflow/dags

  airflow-webserver:
    image: apache/airflow:2.7.2
    container_name: airflow_webserver
    restart: always
    depends_on:
      - airflow-init
    ports:
      - "8080:8080"
    environment:
      AIRFLOW_HOME: /opt/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: sqlite:////opt/airflow/airflow.db
    volumes:
      - ./airflow/dags:/opt/airflow/dags
    command: webserver

  airflow-scheduler:
    image: apache/airflow:2.7.2
    container_name: airflow_scheduler
    restart: always
    depends_on:
      - airflow-init
    environment:
      AIRFLOW_HOME: /opt/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: sqlite:////opt/airflow/airflow.db
    volumes:
      - ./airflow/dags:/opt/airflow/dags
    command: scheduler

volumes:
  pgdata:
